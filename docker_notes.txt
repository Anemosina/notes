#Manage containers
-- docker create --
docker create [options] IMAGE
  -a, --attach               # attach stdout/err
  -i, --interactive          # attach stdin (interactive)
  -t, --tty                  # pseudo-tty
      --name NAME            # name your image
  -p, --publish 5000:5000    # port map
      --expose 5432          # expose a port to linked containers
  -P, --publish-all          # publish all ports
      --link container:alias # linking
  -v, --volume `pwd`:/app    # mount (absolute paths needed)
  -e, --env NAME=hello       # env vars

  Example
$ docker create --name app_redis_1 --expose 6379 redis:3.0.2
-Create a container from an image.

-- docker ps --
$ docker ps
$ docker ps -a
$ docker kill $ID
- Manage containers using ps/kill.

-- docker exec --
docker exec [options] CONTAINER COMMAND
  -d, --detach        # run in background
  -i, --interactive   # stdin
  -t, --tty           # interactive
Example
$ docker exec app_web_1 tail logs/development.log
$ docker exec -t -i app_web_1 rails c
- Run commands in a container.

-- docker start --
docker start [options] CONTAINER
  -a, --attach        # attach stdout/err
  -i, --interactive   # attach stdin

docker stop [options] CONTAINER
-Start/stop a container.

-- docker logs --
$ docker logs $ID
$ docker logs $ID 2>&1 | less
$ docker logs -f $ID # Follow log output
-See whatâ€™s being logged in an container.

#Images
-- docker images --
$ docker images
  REPOSITORY   TAG        ID
  ubuntu       12.10      b750fe78269d
  me/myapp     latest     7b2431a8d968
$ docker images -a   # also show intermediate
-Manages images.

-- docker rmi --
docker rmi b750fe78269d
-Deletes images.

#Clean up
-- Clean all --
docker system prune
-Cleans up dangling images, containers, volumes, and networks (ie, not associated with a container)

docker system prune -a
Additionally remove any stopped containers and all unused images (not just dangling images)

-- Containers --
# Stop all running containers
docker stop $(docker ps -a -q)

# Delete stopped containers
docker container prune

-- Images --
docker image prune [-a]
-Delete all the images

-- Volumes --
docker volume prune
-Delete all the volumes

---------------------------------------------------------
examples:

docker version
docker info
docker images
docker ps -a - show running containers & exiting containers
docker pull alpine
docker run alpine
docker exec -it container_id /bin/sh
docker rmi ubuntu14:04

container lifecicle

docker start <container>
docker stop <container>
docker rm <container>

docker run -d --name web -p80:8000 nigelpulton - (-d detached  --name conainer to be named __  -p80 (on local, 8000 container_port)
docker run -it --name temp ubuntu:latest /bin/bash

docker -elf 
exit from container without shutdown ctr+p ctr+q
---------------------------------------------------------

The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. 

The Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. 

A Docker registry stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images on Docker Hub by default. 

When you use the docker pull or docker run commands, the required images are pulled from your configured registry. When you use the docker push command, your image is pushed to your configured registry.

Docker objects
When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. This section is a brief overview of some of those objects.

- An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization. 

-A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI. You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.

$ docker run -i -t ubuntu /bin/bash
the container is running interactively and attached to your terminal (due to the -i and -t flags)

Docker creates a network interface to connect the container to the default network, since you did not specify any networking options. This includes assigning an IP address to the container. By default, containers can connect to external networks using the host machineâ€™s network connection.

- Services allow you to scale containers across multiple Docker daemons, which all work together as a swarm with multiple managers and workers. Each member of a swarm is a Docker daemon, and all the daemons communicate using the Docker API. A service allows you to define the desired state, such as the number of replicas of the service that must be available at any given time. By default, the service is load-balanced across all worker nodes. To the consumer, the Docker service appears to be a single application. Docker Engine supports swarm mode in Docker 1.12 and higher.

NamespacesðŸ”—
Docker uses a technology called namespaces to provide the isolated workspace called the container. When you run a container, Docker creates a set of namespaces for that container.

Docker Engine uses namespaces such as the following on Linux:
-The pid namespace: Process isolation (PID: Process ID).
-The net namespace: Managing network interfaces (NET: Networking).
-The ipc namespace: Managing access to IPC resources (IPC: InterProcess Communication).
-The mnt namespace: Managing filesystem mount points (MNT: Mount).
-The uts namespace: Isolating kernel and version identifiers. (UTS: Unix Timesharing System).

Control groups
Docker Engine on Linux also relies on another technology called control groups (cgroups). A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints. For example, you can limit the memory available to a specific container.

Union file systems
Union file systems, or UnionFS, are file systems that operate by creating layers, making them very lightweight and fast. Docker Engine uses UnionFS to provide the building blocks for containers. Docker Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs, and DeviceMapper.

Container format
Docker Engine combines the namespaces, control groups, and UnionFS into a wrapper called a container format. The default container format is libcontainer. In the future, Docker may support other container formats by integrating with technologies such as BSD Jails or Solaris Zones.  

---- END PART 1 -----

----PART 2 ----
Writing a Dockerfile is the first step to containerizing an application. You can think of these Dockerfile commands as a step-by-step recipe on how to build up your image. This one takes the following steps:

Start FROM the pre-existing node:current-slim image. This is an official image, built by the node.js vendors and validated by Docker to be a high-quality image containing the Node.js Long Term Support (LTS) interpreter and basic dependencies.
Use WORKDIR to specify that all subsequent actions should be taken from the directory /usr/src/app in your image filesystem (never the hostâ€™s filesystem).
COPY the file package.json from your host to the present location (.) in your image (so in this case, to /usr/src/app/package.json)
RUN the command npm install inside your image filesystem (which will read package.json to determine your appâ€™s node dependencies, and install them)
COPY in the rest of your appâ€™s source code from your host to your image filesystem.
The CMD directive is the first example of specifying some metadata in your image that describes how to run a container based on this image. In this case, itâ€™s saying that the containerized process that this image is meant to support is npm start.
The EXPOSE 8080 informs Docker that the container is listening on port 8080 at runtime.

docker run --publish 8000:8080 --detach --name bb bulletinboard:1.0
There are a couple of common flags here:

--publish asks Docker to forward traffic incoming on the hostâ€™s port 8000, to the containerâ€™s port 8080. Containers have their own private set of ports, so if you want to reach one from the network, you have to forward traffic to it in this way. Otherwise, firewall rules will prevent all network traffic from reaching your container, as a default security posture.
--detach asks Docker to run this container in the background.
--name specifies a name with which you can refer to your container in subsequent commands, in this case bb.

$docker tag bulletinboard:1.0 gordon/bulletinboard:1.0

$docker push gordon/bulletinboard:1.0



